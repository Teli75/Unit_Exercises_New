{"ast":null,"code":"var _jsxFileName = \"/Users/ehernandez12/Documents/TechDegree/Unit_Exercises/Unit_7/data-fetching-in-react/START-HERE/gif-search/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport SearchForm from './Components/SearchForm';\nimport GifList from \"./Components/GifList\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  //the state is the gif data we want to display\n  //gifs is going to be a collection of objects that will change via components\n  //state declaration\n  const [gifs, setGifs] = useState([]);\n  //set up all data fetching inside useEffect hook\n  /* If you need to load external data right when a component gets mounted to the dom or if your request is dependent on another variable like a search term. UseEffect allows us to control when the data is fetched. */\n  //I want the data to be fetched immediately after the component mounts. Inside useEffect set up function, we'll add the fetch method. \n  //The fetch method itself returns a promise, once the fetch promise is fullfilled you can use then methods.\n  useEffect(() => {\n    fetch(\"https://api.giphy.com/v1/gifs/trending?api_key=4js8zLuZ7cD54R9jHuK17V790TFflJTa&limit=24&rating=g\")\n    //each of these callbacks use the promise created by fetch to return a promise of their own\n    //return in json format\n    .then(response => response.json())\n    //updates the gif state by passing in a function that takes the json data via the parameter responseData and pass it to the setGifs function.\n    .then(responseData => setGifs(responseData))\n    //If servers are down you can use the catch method to handle any errors. \n    //Arrow function, takes the parameter error and returns message. \n    .catch(error => console.log(\"Error fetching and parsing data\", error));\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-header\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"inner\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"main-title\",\n          children: \"GifSearch\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(SearchForm, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-content\",\n      children: /*#__PURE__*/_jsxDEV(GifList, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"9au+7fu3XfXLvCqEdMY71MFrLdM=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","SearchForm","GifList","jsxDEV","_jsxDEV","App","_s","gifs","setGifs","fetch","then","response","json","responseData","catch","error","console","log","children","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/ehernandez12/Documents/TechDegree/Unit_Exercises/Unit_7/data-fetching-in-react/START-HERE/gif-search/src/App.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport SearchForm from './Components/SearchForm';\nimport GifList from \"./Components/GifList\";\n\nfunction App() {\n  //the state is the gif data we want to display\n  //gifs is going to be a collection of objects that will change via components\n  //state declaration\n  const [gifs, setGifs] = useState( []);\n  //set up all data fetching inside useEffect hook\n  /* If you need to load external data right when a component gets mounted to the dom or if your request is dependent on another variable like a search term. UseEffect allows us to control when the data is fetched. */\n  //I want the data to be fetched immediately after the component mounts. Inside useEffect set up function, we'll add the fetch method. \n  //The fetch method itself returns a promise, once the fetch promise is fullfilled you can use then methods.\n  useEffect(() => { fetch(\"https://api.giphy.com/v1/gifs/trending?api_key=4js8zLuZ7cD54R9jHuK17V790TFflJTa&limit=24&rating=g\")\n  //each of these callbacks use the promise created by fetch to return a promise of their own\n  //return in json format\n.then(response => response.json())\n//updates the gif state by passing in a function that takes the json data via the parameter responseData and pass it to the setGifs function.\n.then(responseData => setGifs(responseData))\n//If servers are down you can use the catch method to handle any errors. \n//Arrow function, takes the parameter error and returns message. \n.catch(error => console.log(\"Error fetching and parsing data\", error));\n}, []);\n  return (\n    <div>\n      <div className=\"main-header\">\n        <div className=\"inner\">\n          <h1 className=\"main-title\">GifSearch</h1>\n          <SearchForm />\n        </div>\n      </div>\n      <div className=\"main-content\">\n        <GifList />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,UAAU,MAAM,yBAAyB;AAChD,OAAOC,OAAO,MAAM,sBAAsB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3C,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb;EACA;EACA;EACA,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGR,QAAQ,CAAE,EAAE,CAAC;EACrC;EACA;EACA;EACA;EACAD,SAAS,CAAC,MAAM;IAAEU,KAAK,CAAC,mGAAmG;IAC3H;IACA;IAAA,CACDC,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC;IACjC;IAAA,CACCF,IAAI,CAACG,YAAY,IAAIL,OAAO,CAACK,YAAY,CAAC;IAC3C;IACA;IAAA,CACCC,KAAK,CAACC,KAAK,IAAIC,OAAO,CAACC,GAAG,CAAC,iCAAiC,EAAEF,KAAK,CAAC,CAAC;EACtE,CAAC,EAAE,EAAE,CAAC;EACJ,oBACEX,OAAA;IAAAc,QAAA,gBACEd,OAAA;MAAKe,SAAS,EAAC,aAAa;MAAAD,QAAA,eAC1Bd,OAAA;QAAKe,SAAS,EAAC,OAAO;QAAAD,QAAA,gBACpBd,OAAA;UAAIe,SAAS,EAAC,YAAY;UAAAD,QAAA,EAAC;QAAS;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACzCnB,OAAA,CAACH,UAAU;UAAAmB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACX;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC,eACNnB,OAAA;MAAKe,SAAS,EAAC,cAAc;MAAAD,QAAA,eAC3Bd,OAAA,CAACF,OAAO;QAAAkB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACR,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV;AAACjB,EAAA,CAhCQD,GAAG;AAAAmB,EAAA,GAAHnB,GAAG;AAkCZ,eAAeA,GAAG;AAAC,IAAAmB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}