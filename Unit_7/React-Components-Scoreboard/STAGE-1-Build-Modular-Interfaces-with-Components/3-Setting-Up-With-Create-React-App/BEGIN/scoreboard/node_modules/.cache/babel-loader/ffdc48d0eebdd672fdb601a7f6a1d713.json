{"ast":null,"code":"var _jsxFileName = \"/Users/ehernandez12/Documents/TechDegree/Unit_Exercises/Unit_7/React-Components/STAGE-1-Build-Modular-Interfaces-with-Components/3-Setting-Up-With-Create-React-App/BEGIN/scoreboard/src/components/AddPlayerForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef } from \"react\";\nimport PropTypes from 'prop-types';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst AddPlayerForm = _ref => {\n  _s();\n\n  let {\n    addPlayer\n  } = _ref;\n  //const [value, setValue] = useState(\"\");\n  const playerInput = useRef();\n\n  const handleSubmit = event => {\n    /*browser posts a req back to server which causes app to reload in browser,\n    we would lose all our app state in the process, that's why we use preventDef */\n    event.preventDefault(); //Instead of passing the state by passing value, we pass Ref by passing playerInput\n\n    addPlayer(playerInput.current.value); //setValue(\"\");\n\n    event.currentTarget.reset();\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: event => handleSubmit(event),\n    children: [console.log(playerInput), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      ref: playerInput //value= {value}\n      ,\n      placeholder: \"Enter a player's name\"\n      /* the event object provides a target property which points\n      to the underlying input element in the dom. We can read the\n      value from it and use it to update our state */\n      //onChange={(event) => setValue(event.target.value) }\n\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"submit\",\n      value: \"Add Player\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 9\n  }, this);\n};\n\n_s(AddPlayerForm, \"w9CBJMHM0RfUyQm6C7T316w/Cj0=\");\n\n_c = AddPlayerForm;\nAddPlayerForm.propTypes = {\n  addPlayer: PropTypes.func\n};\nexport default AddPlayerForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddPlayerForm\");","map":{"version":3,"names":["React","useRef","PropTypes","AddPlayerForm","addPlayer","playerInput","handleSubmit","event","preventDefault","current","value","currentTarget","reset","console","log","propTypes","func"],"sources":["/Users/ehernandez12/Documents/TechDegree/Unit_Exercises/Unit_7/React-Components/STAGE-1-Build-Modular-Interfaces-with-Components/3-Setting-Up-With-Create-React-App/BEGIN/scoreboard/src/components/AddPlayerForm.js"],"sourcesContent":["import React, { useRef } from \"react\";\nimport PropTypes from 'prop-types';\n\n\nconst AddPlayerForm = ({addPlayer}) => {\n    //const [value, setValue] = useState(\"\");\n    const playerInput = useRef();\n\n    const handleSubmit = (event) => {\n        /*browser posts a req back to server which causes app to reload in browser,\n        we would lose all our app state in the process, that's why we use preventDef */\n        event.preventDefault();\n        //Instead of passing the state by passing value, we pass Ref by passing playerInput\n        addPlayer(playerInput.current.value);\n        //setValue(\"\");\n        event.currentTarget.reset();\n    }\n\n    return (\n        <form onSubmit= {(event) => handleSubmit(event)}>\n            {console.log(playerInput)}\n            <input \n                type= \"text\"\n                ref={playerInput}\n                //value= {value}\n                placeholder=\"Enter a player's name\"\n                /* the event object provides a target property which points\n                to the underlying input element in the dom. We can read the\n                value from it and use it to update our state */\n                //onChange={(event) => setValue(event.target.value) }\n            />\n            <input\n            type=\"submit\"\n            value=\"Add Player\"\n            />\n        </form>\n    )\n}\n\nAddPlayerForm.propTypes = {\n    addPlayer: PropTypes.func\n}\nexport default AddPlayerForm;"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,MAAhB,QAA8B,OAA9B;AACA,OAAOC,SAAP,MAAsB,YAAtB;;;AAGA,MAAMC,aAAa,GAAG,QAAiB;EAAA;;EAAA,IAAhB;IAACC;EAAD,CAAgB;EACnC;EACA,MAAMC,WAAW,GAAGJ,MAAM,EAA1B;;EAEA,MAAMK,YAAY,GAAIC,KAAD,IAAW;IAC5B;AACR;IACQA,KAAK,CAACC,cAAN,GAH4B,CAI5B;;IACAJ,SAAS,CAACC,WAAW,CAACI,OAAZ,CAAoBC,KAArB,CAAT,CAL4B,CAM5B;;IACAH,KAAK,CAACI,aAAN,CAAoBC,KAApB;EACH,CARD;;EAUA,oBACI;IAAM,QAAQ,EAAIL,KAAD,IAAWD,YAAY,CAACC,KAAD,CAAxC;IAAA,WACKM,OAAO,CAACC,GAAR,CAAYT,WAAZ,CADL,eAEI;MACI,IAAI,EAAE,MADV;MAEI,GAAG,EAAEA,WAFT,CAGI;MAHJ;MAII,WAAW,EAAC;MACZ;AAChB;AACA;MACgB;;IARJ;MAAA;MAAA;MAAA;IAAA,QAFJ,eAYI;MACA,IAAI,EAAC,QADL;MAEA,KAAK,EAAC;IAFN;MAAA;MAAA;MAAA;IAAA,QAZJ;EAAA;IAAA;IAAA;IAAA;EAAA,QADJ;AAmBH,CAjCD;;GAAMF,a;;KAAAA,a;AAmCNA,aAAa,CAACY,SAAd,GAA0B;EACtBX,SAAS,EAAEF,SAAS,CAACc;AADC,CAA1B;AAGA,eAAeb,aAAf"},"metadata":{},"sourceType":"module"}