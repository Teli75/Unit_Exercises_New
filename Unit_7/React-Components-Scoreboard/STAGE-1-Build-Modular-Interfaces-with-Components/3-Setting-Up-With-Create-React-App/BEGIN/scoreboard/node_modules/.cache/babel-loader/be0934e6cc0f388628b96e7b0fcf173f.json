{"ast":null,"code":"var _jsxFileName = \"/Users/ehernandez12/Documents/TechDegree/Unit_Exercises/Unit_7/React-Components/STAGE-1-Build-Modular-Interfaces-with-Components/3-Setting-Up-With-Create-React-App/BEGIN/scoreboard/src/components/Player.js\";\nimport React, { memo } from 'react';\nimport PropTypes from 'prop-types';\nimport Counter from './Counter';\nimport Icon from \"./Icon\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Player = _ref => {\n  let {\n    name,\n    removePlayer,\n    id,\n    score,\n    changeScore,\n    isHighScore\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"player\",\n    children: [console.log(name + ' rendered'), /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"player-name\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"remove-player\",\n        onClick: () => removePlayer(id),\n        children: \"\\u2716\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Icon, {\n        isHighScore: isHighScore\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 11\n      }, this), name]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Counter, {\n      score: score,\n      id: id,\n      changeScore: changeScore\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 7\n  }, this);\n};\n\n_c = Player;\nPlayer.propTypes = {\n  name: PropTypes.string.isRequired,\n  score: PropTypes.number.isRequired,\n  id: PropTypes.number.isRequired,\n  removePlayer: PropTypes.func.isRequired,\n  changeScore: PropTypes.func.isRequired,\n  isHighScore: PropTypes.bool.isRequired\n}; //Memo comparison function\n\nconst playerPropsAreEqual = (prevProps, nextProps) => {\n  //Changes a player instance only when a change in the score prop or isHighScore is detected\n  return prevProps.score === nextProps.score && prevProps.isHighScore === nextProps.isHighScore;\n};\n\nexport default _c2 = /*#__PURE__*/memo(Player, playerPropsAreEqual);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Player\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"names":["React","memo","PropTypes","Counter","Icon","Player","name","removePlayer","id","score","changeScore","isHighScore","console","log","propTypes","string","isRequired","number","func","bool","playerPropsAreEqual","prevProps","nextProps"],"sources":["/Users/ehernandez12/Documents/TechDegree/Unit_Exercises/Unit_7/React-Components/STAGE-1-Build-Modular-Interfaces-with-Components/3-Setting-Up-With-Create-React-App/BEGIN/scoreboard/src/components/Player.js"],"sourcesContent":["import React, {memo} from 'react';\nimport PropTypes from 'prop-types';\nimport Counter from './Counter';\nimport Icon from \"./Icon\";\n\nconst Player = ({name, removePlayer, id, score, changeScore, isHighScore }) => {\n    return (\n      <div className=\"player\">\n        {console.log(name + ' rendered')}\n        <span className=\"player-name\">\n          <button className=\"remove-player\" onClick={() => removePlayer(id)}>âœ–</button>\n          <Icon isHighScore={isHighScore}/>\n          {name}\n        </span>\n  \n  {/*counter gets a prop called changeScore, which comes from app.js\n  When a button in the counter is clicked, the function will be executed */}\n        <Counter \n        score={score}\n        id={id}\n        changeScore={changeScore}\n        />\n      </div>\n    );\n  }\n\n  Player.propTypes= {\n    name: PropTypes.string.isRequired,\n    score: PropTypes.number.isRequired,\n    id: PropTypes.number.isRequired,\n    removePlayer: PropTypes.func.isRequired,\n    changeScore: PropTypes.func.isRequired,\n    isHighScore: PropTypes.bool.isRequired\n  }\n\n\n  //Memo comparison function\n  const playerPropsAreEqual = (prevProps, nextProps) => {\n    //Changes a player instance only when a change in the score prop or isHighScore is detected\n    return prevProps.score === nextProps.score && prevProps.isHighScore === nextProps.isHighScore;\n\n  }\n\n  export default memo(Player, playerPropsAreEqual);"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,IAAf,QAA0B,OAA1B;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,IAAP,MAAiB,QAAjB;;;AAEA,MAAMC,MAAM,GAAG,QAAgE;EAAA,IAA/D;IAACC,IAAD;IAAOC,YAAP;IAAqBC,EAArB;IAAyBC,KAAzB;IAAgCC,WAAhC;IAA6CC;EAA7C,CAA+D;EAC3E,oBACE;IAAK,SAAS,EAAC,QAAf;IAAA,WACGC,OAAO,CAACC,GAAR,CAAYP,IAAI,GAAG,WAAnB,CADH,eAEE;MAAM,SAAS,EAAC,aAAhB;MAAA,wBACE;QAAQ,SAAS,EAAC,eAAlB;QAAkC,OAAO,EAAE,MAAMC,YAAY,CAACC,EAAD,CAA7D;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QADF,eAEE,QAAC,IAAD;QAAM,WAAW,EAAEG;MAAnB;QAAA;QAAA;QAAA;MAAA,QAFF,EAGGL,IAHH;IAAA;MAAA;MAAA;MAAA;IAAA,QAFF,eAUE,QAAC,OAAD;MACA,KAAK,EAAEG,KADP;MAEA,EAAE,EAAED,EAFJ;MAGA,WAAW,EAAEE;IAHb;MAAA;MAAA;MAAA;IAAA,QAVF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAkBD,CAnBH;;KAAML,M;AAqBJA,MAAM,CAACS,SAAP,GAAkB;EAChBR,IAAI,EAAEJ,SAAS,CAACa,MAAV,CAAiBC,UADP;EAEhBP,KAAK,EAAEP,SAAS,CAACe,MAAV,CAAiBD,UAFR;EAGhBR,EAAE,EAAEN,SAAS,CAACe,MAAV,CAAiBD,UAHL;EAIhBT,YAAY,EAAEL,SAAS,CAACgB,IAAV,CAAeF,UAJb;EAKhBN,WAAW,EAAER,SAAS,CAACgB,IAAV,CAAeF,UALZ;EAMhBL,WAAW,EAAET,SAAS,CAACiB,IAAV,CAAeH;AANZ,CAAlB,C,CAUA;;AACA,MAAMI,mBAAmB,GAAG,CAACC,SAAD,EAAYC,SAAZ,KAA0B;EACpD;EACA,OAAOD,SAAS,CAACZ,KAAV,KAAoBa,SAAS,CAACb,KAA9B,IAAuCY,SAAS,CAACV,WAAV,KAA0BW,SAAS,CAACX,WAAlF;AAED,CAJD;;AAMA,kCAAeV,IAAI,CAACI,MAAD,EAASe,mBAAT,CAAnB"},"metadata":{},"sourceType":"module"}