{"ast":null,"code":"var _jsxFileName = \"/Users/ehernandez12/Documents/TechDegree/Unit_Exercises/Unit_7/React-Components/STAGE-1-Build-Modular-Interfaces-with-Components/3-Setting-Up-With-Create-React-App/BEGIN/scoreboard/src/components/StopWatch.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\n/*this is a utility, not core part of project\nThe state of stopwatch will need to keep updating constantly */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst StopWatch = () => {\n  _s();\n\n  const [isRunning, setIsRunning] = useState(false);\n  const [elapsedTime, setElapsedTime] = useState(0); //accepts 2 arguments, function, aka the side effect and a dependancy array\n\n  useEffect(() => {\n    console.log('Running side effect');\n    let id;\n\n    if (isRunning) {\n      //runs code in a fixed time interval\n      id = setInterval(() => {\n        setElapsedTime(prevTime => prevTime + 1);\n        console.log(\"tick\");\n      }, 1000);\n    } //cancels any time repeated actions\n\n\n    return () => clearInterval(id);\n    console.log('clean up');\n    console.log(\"Running side effect\");\n  }, [isRunning]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"stopwatch\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Stopwatch\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"stopwatch-time\",\n      children: elapsedTime\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setIsRunning(prevValue => !prevValue),\n      children: isRunning ? \"Stop\" : \"Start\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setElapsedTime(0),\n      children: \"Reset\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 9\n  }, this);\n};\n\n_s(StopWatch, \"Rz4NAaLSI1e7oHsaomkHpnEvUbk=\");\n\n_c = StopWatch;\nexport default StopWatch;\n\nvar _c;\n\n$RefreshReg$(_c, \"StopWatch\");","map":{"version":3,"names":["React","useState","useEffect","StopWatch","isRunning","setIsRunning","elapsedTime","setElapsedTime","console","log","id","setInterval","prevTime","clearInterval","prevValue"],"sources":["/Users/ehernandez12/Documents/TechDegree/Unit_Exercises/Unit_7/React-Components/STAGE-1-Build-Modular-Interfaces-with-Components/3-Setting-Up-With-Create-React-App/BEGIN/scoreboard/src/components/StopWatch.js"],"sourcesContent":["import React, {useState, useEffect} from \"react\";\n\n/*this is a utility, not core part of project\nThe state of stopwatch will need to keep updating constantly */\n\nconst StopWatch = () => {\n    const [isRunning, setIsRunning] = useState(false);\n    const [elapsedTime, setElapsedTime] = useState(0);\n    \n    //accepts 2 arguments, function, aka the side effect and a dependancy array\n    useEffect(() => {\n        console.log('Running side effect');\n        let id;\n        if (isRunning){\n            //runs code in a fixed time interval\n            id = setInterval(() => \n            { setElapsedTime(prevTime => prevTime + 1);\n            console.log(\"tick\");\n        }, 1000);\n        }//cancels any time repeated actions\n        return () => \n        clearInterval(id);\n        console.log('clean up');\n\n        console.log(\"Running side effect\");\n    },[isRunning]);\n    return(\n        <div className='stopwatch'>\n            <h2>Stopwatch</h2>\n            <span className='stopwatch-time'>{elapsedTime}</span>\n            {/*The onClick event will call the function setIsRunning received from useState hook*/}\n            {/* If isRunning = false, then make it not false which is true */}\n            <button onClick={() => setIsRunning((prevValue) => !prevValue)}>\n                {isRunning ? \"Stop\" : \"Start\" } \n            </button>\n            <button onClick={() => setElapsedTime(0)}>Reset</button>\n        </div>\n    );\n}\n\nexport default StopWatch;"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;AAEA;AACA;;;;AAEA,MAAMC,SAAS,GAAG,MAAM;EAAA;;EACpB,MAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BJ,QAAQ,CAAC,KAAD,CAA1C;EACA,MAAM,CAACK,WAAD,EAAcC,cAAd,IAAgCN,QAAQ,CAAC,CAAD,CAA9C,CAFoB,CAIpB;;EACAC,SAAS,CAAC,MAAM;IACZM,OAAO,CAACC,GAAR,CAAY,qBAAZ;IACA,IAAIC,EAAJ;;IACA,IAAIN,SAAJ,EAAc;MACV;MACAM,EAAE,GAAGC,WAAW,CAAC,MACjB;QAAEJ,cAAc,CAACK,QAAQ,IAAIA,QAAQ,GAAG,CAAxB,CAAd;QACFJ,OAAO,CAACC,GAAR,CAAY,MAAZ;MACH,CAHmB,EAGjB,IAHiB,CAAhB;IAIH,CATW,CASX;;;IACD,OAAO,MACPI,aAAa,CAACH,EAAD,CADb;IAEAF,OAAO,CAACC,GAAR,CAAY,UAAZ;IAEAD,OAAO,CAACC,GAAR,CAAY,qBAAZ;EACH,CAfQ,EAeP,CAACL,SAAD,CAfO,CAAT;EAgBA,oBACI;IAAK,SAAS,EAAC,WAAf;IAAA,wBACI;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QADJ,eAEI;MAAM,SAAS,EAAC,gBAAhB;MAAA,UAAkCE;IAAlC;MAAA;MAAA;MAAA;IAAA,QAFJ,eAKI;MAAQ,OAAO,EAAE,MAAMD,YAAY,CAAES,SAAD,IAAe,CAACA,SAAjB,CAAnC;MAAA,UACKV,SAAS,GAAG,MAAH,GAAY;IAD1B;MAAA;MAAA;MAAA;IAAA,QALJ,eAQI;MAAQ,OAAO,EAAE,MAAMG,cAAc,CAAC,CAAD,CAArC;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QARJ;EAAA;IAAA;IAAA;IAAA;EAAA,QADJ;AAYH,CAjCD;;GAAMJ,S;;KAAAA,S;AAmCN,eAAeA,SAAf"},"metadata":{},"sourceType":"module"}